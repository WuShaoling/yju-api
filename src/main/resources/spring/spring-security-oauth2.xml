<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
            http://www.springframework.org/schema/security/oauth2
            http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd
            http://www.springframework.org/schema/security
            http://www.springframework.org/schema/security/spring-security-4.1.xsd">

    <!-- Spring-Security 的配置 -->
    <!-- 注意开启use-expressions.表示开启表达式. -->

    <!-- This is default url to get a token from OAuth -->
    <security:http pattern="/oauth/token" create-session="stateless"
                   authentication-manager-ref="authenticationManager" use-expressions="false"
                   xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
        <anonymous enabled="false" />
        <csrf disabled="true" />
        <http-basic entry-point-ref="clientAuthenticationEntryPoint" />
        <!-- include this only if you need to authenticate clients via request
            parameters -->
        <custom-filter ref="clientCredentialsTokenEndpointFilter"
                       after="BASIC_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
    </security:http>

    <!-- This is where we tells spring security what URL should be protected
        and what roles have access to them -->
    <security:http create-session="never"
                   entry-point-ref="oauthAuthenticationEntryPoint"
                   access-decision-manager-ref="accessDecisionManager"
                   xmlns="http://www.springframework.org/schema/security">
        <anonymous enabled="false" />
        <csrf disabled="true" />

        <!-- <intercept-url pattern="/userform/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN','ROLE_ROOT')" /> -->
        <intercept-url pattern="/appuser/users/list" access="hasAnyRole('ROLE_USER','ROLE_ADMIN','ROLE_ROOT')" />
        <intercept-url pattern="/admin/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN','ROLE_ROOT')" />
        <!--<intercept-url pattern="/test" access="hasAnyRole('ROLE_USER','ROLE_ADMIN','ROLE_ROOT')" />-->
        <custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
    </security:http>


    <bean id="oauthAuthenticationEntryPoint"
          class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="insight365" />
    </bean>

    <bean id="clientAuthenticationEntryPoint"
          class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="insight365/client" />
        <property name="typeName" value="Basic" />
    </bean>

    <bean id="oauthAccessDeniedHandler"
          class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

    <bean id="clientCredentialsTokenEndpointFilter"
          class="com.guanshan.nlp.webapp.security.ClientCredentialsTokenEndpointFilter">
        <property name="authenticationManager" ref="clientAuthenticationManager" />
    </bean>

    <bean id="accessDecisionManager" class="com.guanshan.nlp.webapp.security.UnanimousBased"
          xmlns="http://www.springframework.org/schema/beans">
        <constructor-arg>
            <list>
                <bean class="org.springframework.security.web.access.expression.WebExpressionVoter" />
                <bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
                <bean class="com.guanshan.nlp.webapp.security.RoleVoter" />
                <bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
            </list>
        </constructor-arg>
    </bean>

    <authentication-manager id="clientAuthenticationManager"
                            xmlns="http://www.springframework.org/schema/security">
        <authentication-provider user-service-ref="clientDetailsUserService" />
    </authentication-manager>


    <!-- This is simple authentication manager, with a hardcoded user/password
        combination. We can replace this with a user defined com.guanshan.vc.webapp.service to get few users
        credentials from DB -->
    <authentication-manager id="authenticationManager"
                            xmlns="http://www.springframework.org/schema/security">
        <authentication-provider user-service-ref="userDetailsService">
            <security:password-encoder ref="passwordEncoder" />
        </authentication-provider>
    </authentication-manager>

    <!-- 对密码进行base64编码 -->
    <bean id="passwordEncoder" class="com.guanshan.nlp.webapp.shared.util.codec.EncryptBase64">
        <constructor-arg name="algorithm" value="md5"></constructor-arg>
    </bean>

    <bean id="clientDetailsUserService"
          class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <constructor-arg ref="clientDetails" />
    </bean>


    <!-- This defined token store, we have used inmemory tokenstore for now
        but this can be changed to a user defined one -->
    <!--<bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore"
        /> -->
    <bean id="tokenStore"
          class="org.springframework.security.oauth2.provider.token.store.JdbcTokenStore">
        <constructor-arg index="0" ref="dataSource" />
    </bean>

    <!-- This is where we defined token based configurations, token validity
        and other things -->
    <bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <property name="tokenStore" ref="tokenStore" />
        <property name="supportRefreshToken" value="true" />
        <property name="accessTokenValiditySeconds" value="259200" />
        <property name="clientDetailsService" ref="clientDetails" />
    </bean>

    <bean id="userApprovalHandler"
          class="org.springframework.security.oauth2.provider.approval.TokenStoreUserApprovalHandler">
        <property name="tokenStore" ref="tokenStore" />
        <property name="clientDetailsService" ref="clientDetails" />
        <property name="requestFactory" ref="oAuth2RequestFactory" />
    </bean>

    <bean id="oAuth2RequestFactory"
          class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory">
        <constructor-arg ref="clientDetails" />
    </bean>

    <oauth:authorization-server
            client-details-service-ref="clientDetails" token-services-ref="tokenServices"
            user-approval-handler-ref="userApprovalHandler">
        <oauth:authorization-code />
        <oauth:implicit />
        <oauth:refresh-token />
        <oauth:client-credentials />
        <oauth:password />
    </oauth:authorization-server>

    <oauth:resource-server id="resourceServerFilter"
                           resource-id="insight365" token-services-ref="tokenServices" />

    <oauth:client-details-service id="clientDetails">
        <!-- client 要实现单点登录client-id必须是insight365-->
        <oauth:client client-id="insight365"
                      authorized-grant-types="password,authorization_code,refresh_token,implicit"
                      scope="read, write, trust" secret="guanshantech" />
    </oauth:client-details-service>

    <security:global-method-security
            pre-post-annotations="enabled" proxy-target-class="true">
        <!--you could also wire in the expression handler up at the layer of the
            http filters. See https://jira.springsource.org/browse/SEC-1452 -->
        <security:expression-handler ref="oauthExpressionHandler" />
    </security:global-method-security>

    <oauth:expression-handler id="oauthExpressionHandler" />
    <oauth:web-expression-handler id="oauthWebExpressionHandler" />
</beans>